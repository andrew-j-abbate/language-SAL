# @Author: aja97
# @Date:   2017-03-17T11:05:37-04:00
# @Last modified by:   aja97
# @Last modified time: 2017-06-02T12:02:48-04:00



'scopeName': 'source'
'name': 'Symbolic Analysis Laboratory'
'fileTypes': ['sal']

patterns: [
  {
    include: '#types'
  }
  {
    include: '#decs'
  }
  {
    include: '#characters'
  }
  {
    include: '#tokens'
  }
  {
    include: '#comments'
  }
  {
    include: '#varscopes'
  }
  {
    include: '#constructs'
  }
  {
    include: '#temporal'
  }
  {
    include: '#function'
  }
]

repository:
  types:
    patterns: [
      {
        match: '([a-zA-Z_]\\w*\\s*)(?=\\:)'
        name: 'type.name'
      }
    ]
  characters:
    patterns: [
      {
        match: "(\\=|\\[|\\]|\\{|\\}|\\||\\-|\\+|\\/|\\=\\>|\\<\\=\\>|\\*|\\,|\\.\\.|\\(|\\)|\\#|\\:\\=|\\-\\-\\>|\\/\\=|\\>\\=|\\<\\=|\\<|\\>|\\.|\\?|\\!|\\;)"
        name: 'characters.reserved'
      }
    ]
  tokens:
    patterns: [
      {
        match: '\\b(AND|and|ARRAY|array|BOOLEAN|boolean|bool|BEGIN|begin|ELSE|DIV|div|else|ELSIF|elsif|END|end|ENDIF|endif|EXISTS|exists|FALSE|false|FORALL|forall|IF|if|IMPLIES|implies|IMPORTING|importing|IN|in|INTEGER|integer|LAMBDA|lambda|LET|let|NATURAL|natural|nat|NOT|not|NZREAL|nzreal|NZINTEGER|nzinteger|OF|of|OR|or|TYPE|type|THEN|then|TRUE|true|RENAME|REAL|real|rename|WITH|with|XOR|xor)\\b'
        name : 'token.reserved'
      },
        match: "(\\b[a-zA-Z_]+\\w*\\')"
        name : 'token.nextstate'
    ]
  constructs:
    patterns: [
      {
          match: '(INITIALIZATION|initialzation|DEFINITION|definition|TRANSITION|transition|CONTEXT|context|MODULE|module|THEOREM|theorem|CLAIM|claim|DATATYPE|datatype|LEMMA|lemma|OBLIGATION|obligation)\\s+'
          name : 'construct.declaration'
      }
    ]
  varscopes:
    patterns: [
      {
          match: '(INPUT|input)\\s+'
          name : 'INPUT.inputvar.varscope'
      },
      {
          match: '(OUTPUT|output|LOCAL|local|GLOBAL|global)\\s+'
          name : 'OUTPUT.outputvar.varscope'
      }
    ]
  temporal:
    patterns: [
      {
        match: '\\b(G|F|E|X|A|U|R)\\b(\\()'
        captures:
          1:
            name: 'operators.temporalLogic.specification'
          2:
            name: 'openParenthesis.temporalLogic.specification'
        name : 'temporalLogic.specification'
      }
    ]
  comments:
    patterns: [
      {
        begin: '%'
        end  : '\\n'
        name : 'comment.line'
      }
    ]
  function:
    patterns: [
      {
        match: "([a-zA-Z_]\\w*)(\\()"
        captures:
          1:
            name : 'name.function.declaration'
          2:
            name:  'openParenthesis.function.declaration'
          name: 'function.declaration'
      }
    ]
    decs:
      patterns: [
        {
          match: '[a-zA-Z_]\\w*(?=(\\,\\s*[a-zA-Z_]\\w*)+\\:)'
          name: 'dec.name'
        }
      ]
